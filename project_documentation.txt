# Документация: Система консультирования обучающихся

## 1. Введение

Система консультирования обучающихся — это веб-приложение, разработанное для поддержки студентов физико-математического, информационного и технологического факультетов. Оно предоставляет рекомендации по учебным запросам (например, подготовка к экзаменам) и предлагает релевантную литературу на основе анализа текста запроса. Система использует обработку естественного языка (NLP) и базу данных для поиска литературы по ключевым словам.

### Цели проекта
- Автоматизировать предоставление рекомендаций по учебным вопросам.
- Обеспечить поиск литературы по ключевым словам с учётом морфологических форм (например, "математике" → "математика").
- Создать удобный интерфейс в тёмной теме с фиолетовыми акцентами, вдохновлённый современными AI-инструментами, такими как Grok и Perplexity.

## 2. Архитектура системы

### Компоненты
1. **Фронтенд** (`index.html`, `script.js`):
   - HTML-страница с интерфейсом, использующим Tailwind CSS и Google Fonts (Inter).
   - Тёмная тема с фиолетовыми акцентами (#7C3AED, #A78BFA).
   - JavaScript для отправки запросов к API и отображения результатов (рекомендаций и литературы).

2. **Бэкенд** (`app.py`, `database.py`, `nlp_module.py`):
   - Flask-сервер для обработки API-запросов (`/api/process`).
   - PostgreSQL для хранения пользователей, запросов, ответов и литературы.
   - Модуль NLP для анализа текста и поиска литературы.

3. **База данных**:
   - Таблицы: `Users`, `Queries`, `Responses`, `Recommendations`, `Literature`.
   - Таблица `Literature` содержит книги с полями `title`, `author`, `subject`, `keywords`, `faculty`, `publication_year`, `url`.

### Технологии
- **Python 3.12.10**: Язык программирования.
- **Flask 3.0.3**: Веб-фреймворк.
- **PostgreSQL**: СУБД.
- **spaCy 3.7.6**: Обработка текста (модель `ru_core_news_sm`).
- **pymorphy3 2.0.3**: Нормализация русских слов (замена `pymorphy2` для совместимости с Python 3.12).
- **Tailwind CSS**: Стилизация интерфейса.
- **JavaScript**: Клиентская логика.

## 3. Функциональность

### Основные функции
1. **Обработка запросов**:
   - Пользователь вводит запрос (например, "экзамен по математике").
   - Система анализирует текст, извлекает ключевые слова и предмет.
   - Возвращает рекомендацию (если применимо) и список литературы.

2. **Поиск литературы**:
   - Ключевые слова запроса нормализуются (например, "математике" → "математика") с помощью `pymorphy3`.
   - Поиск выполняется по полю `keywords` и связанным предметам (`subject`) в таблице `Literature`.
   - Связанные предметы определяются через словарь `subject_mapping` (например, "Математика" → ["Линейная алгебра", "Математический анализ"]).

3. **Интерфейс**:
   - Одно поле ввода, кнопка "Отправить", область вывода результатов.
   - Тёмная тема с фиолетовыми акцентами.
   - Ключевые слова не отображаются в выводе.

### Пример работы
- **Запрос**: "экзамен по математике"
- **Вывод**:
  ```
  Ответ на запрос
  Рекомендуется начать подготовку за 2 недели, изучить материалы курса и выполнить практические задания.
  Рекомендованная литература
  Линейная алгебра и аналитическая геометрия (Ильин В.А., Позняк Э.Г.) - Линейная алгебра
  Ссылка
  Математический анализ (Фихтенгольц Г.М.) - Математический анализ
  ```

## 4. Установка

### Требования
- Python 3.12.10
- PostgreSQL
- Виртуальное окружение
- Браузер с поддержкой JavaScript

### Шаги установки
1. **Клонируйте проект**:
   ```bash
   git clone <repository_url>
   cd diplom/Server
   ```

2. **Создайте виртуальное окружение**:
   ```bash
   python -m venv venv
   .\venv\Scripts\activate
   ```

3. **Установите зависимости**:
   - Сохраните `requirements.txt`:
     ```
     Flask==3.0.3
     Flask-Cors==4.0.1
     psycopg2-binary==2.9.9
     python-dotenv==1.0.1
     spacy==3.7.6
     pymorphy3==2.0.3
     ```
   - Выполните:
     ```bash
     pip install -r requirements.txt
     python -m spacy download ru_core_news_sm
     ```

4. **Настройте PostgreSQL**:
   - Создайте базу данных:
     ```bash
     psql -U postgres
     CREATE DATABASE consulting_system;
     CREATE USER consulting_user WITH PASSWORD 'your_password';
     GRANT ALL PRIVILEGES ON DATABASE consulting_system TO consulting_user;
     ```
   - Создайте таблицы:
     ```sql
     \c consulting_system
     CREATE TABLE Users (
         id SERIAL PRIMARY KEY,
         name VARCHAR(255),
         email VARCHAR(255),
         role VARCHAR(50)
     );
     CREATE TABLE Queries (
         id SERIAL PRIMARY KEY,
         user_id INTEGER REFERENCES Users(id),
         query_text TEXT NOT NULL,
         timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         status VARCHAR(50)
     );
     CREATE TABLE Responses (
         id SERIAL PRIMARY KEY,
         query_id INTEGER REFERENCES Queries(id),
         response_text TEXT NOT NULL,
         timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
     );
     CREATE TABLE Recommendations (
         id SERIAL PRIMARY KEY,
         user_id INTEGER REFERENCES Users(id),
         recommendation_text TEXT NOT NULL,
         timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
     );
     CREATE TABLE Literature (
         id SERIAL PRIMARY KEY,
         title VARCHAR(255) NOT NULL,
         author VARCHAR(255) NOT NULL,
         subject VARCHAR(100) NOT NULL,
         keywords TEXT,
         faculty VARCHAR(255) NOT NULL,
         publication_year INTEGER,
         url TEXT
     );
     ```
   - Заполните таблицу `Literature`:
     ```sql
     INSERT INTO Literature (title, author, subject, keywords, faculty, publication_year, url)
     VALUES
         ('Линейная алгебра и аналитическая геометрия', 'Ильин В.А., Позняк Э.Г.', 'Линейная алгебра', 'матрицы, векторы, алгебра, геометрия, математика, линейная алгебра и аналитическая геометрия', 'Физико-математический, информационный и технологический', 2018, 'https://www.example.com/linear_algebra.pdf'),
         ('Математический анализ', 'Фихтенгольц Г.М.', 'Математический анализ', 'производные, интегралы, анализ, функции, математика, математический анализ', 'Физико-математический, информационный и технологический', 2019, NULL),
         ('Алгоритмы и структуры данных', 'Кормен Т., Лейзерсон Ч., Ривест Р., Стайн К.', 'Информатика', 'алгоритмы, структуры данных, программирование, графы, информатика, алгоритмы и структуры данных', 'Физико-математический, информационный и технологический', 2021, 'https://www.example.com/algorithms.pdf'),
         ('Основы программирования на Python', 'Лутц М.', 'Программирование', 'python, программирование, код, скрипты, информатика, основы программирования на python', 'Физико-математический, информационный и технологический', 2020, 'https://www.example.com/python.pdf'),
         ('Физика: механика', 'Савельев И.В.', 'Физика', 'механика, физика, кинематика, динамика, физика механика', 'Физико-математический, информационный и технологический', 2017, NULL),
         ('Дискретная математика', 'Розен К.', 'Дискретная математика', 'логика, множества, графы, комбинаторика, математика, дискретная математика', 'Физико-математический, информационный и технологический', 2022, 'https://www.example.com/discrete_math.pdf'),
         ('Базы данных: проектирование и разработка', 'Коннолли Т., Бегг К.', 'Базы данных', 'базы данных, sql, проектирование, разработка, информатика, базы данных проектирование и разработка', 'Физико-математический, информационный и технологический', 2023, NULL);
     ```

5. **Настройте `.env`**:
   - Создайте файл `.env` в корне проекта:
     ```
     DB_NAME=consulting_system
     DB_USER=consulting_user
     DB_PASSWORD=your_password
     DB_HOST=localhost
     DB_PORT=5432
     ```

6. **Запустите сервер**:
   ```bash
   python app.py
   ```

7. **Запустите фронтенд**:
   - Откройте `index.html` через Live Server (VS Code, порт 5500).

## 5. Использование

### Интерфейс
- **Ввод запроса**: Введите запрос (например, "экзамен по математике") в поле ввода.
- **Отправка**: Нажмите кнопку "Отправить".
- **Результат**:
  - Рекомендация (если найдена, например, для "экзамен").
  - Список литературы, соответствующий ключевым словам или предмету.
  - Статус обработки (например, "Обработка завершена").

### Примеры запросов
1. **Запрос**: "экзамен по математике"
   - **Вывод**:
     ```
     Ответ на запрос
     Рекомендуется начать подготовку за 2 недели, изучить материалы курса и выполнить практические задания.
     Рекомендованная литература
     Линейная алгебра и аналитическая геометрия (Ильин В.А., Позняк Э.Г.) - Линейная алгебра
     Ссылка
     Математический анализ (Фихтенгольц Г.М.) - Математический анализ
     ```
2. **Запрос**: "графы"
   - **Вывод**:
     ```
     Рекомендованная литература
     Дискретная математика (Розен К.) - Дискретная математика
     Ссылка
     ```
3. **Запрос**: "13"
   - **Вывод**:
     ```
     Результаты не найдены.
     ```

## 6. Тестирование

### Тестовые сценарии
1. **Корректный запрос с рекомендацией и литературой**:
   - Ввод: "экзамен по математике"
   - Ожидаемый результат: Рекомендация + литература (Линейная алгебра, Математический анализ).
2. **Запрос только с предметом**:
   - Ввод: "графы"
   - Ожидаемый результат: Литература (Дискретная математика).
3. **Нерелевантный запрос**:
   - Ввод: "13"
   - Ожидаемый результат: "Результаты не найдены."
4. **API-запрос**:
   ```bash
   curl -X POST -H "Content-Type: application/json" -d "{\"user_id\": 1, \"input_text\": \"экзамен по математике\"}" http://localhost:5000/api/process
   ```
   - Ожидаемый результат: JSON с `query_response` и `literature`.

### Проблемы и решения
1. **Ошибка с `pymorphy2` в Python 3.12**:
   - Проблема: `AttributeError: module 'inspect' has no attribute 'getargspec'`.
   - Решение: Замена `pymorphy2` на `pymorphy3` (версия 2.0.3), совместимая с Python 3.12.10.
2. **Отсутствие литературы для запроса "экзамен по математике"**:
   - Проблема: SQL-запрос не находил записи из-за строгой фильтрации.
   - Решение: Добавлен словарь `subject_mapping` и нормализация слов с `pymorphy3`.
3. **Нерелевантные результаты для чисел**:
   - Проблема: Запрос "13" возвращал всю литературу.
   - Решение: Добавлена проверка `if keywords or subject` в `nlp_module.py`.

### Результаты тестирования
- Все тестовые сценарии успешно выполнены.
- Интерфейс отображает результаты в тёмной теме с фиолетовыми акцентами.
- API возвращает корректные JSON-ответы.

## 7. Возможные улучшения

1. **Ранжирование литературы**:
   - Сортировать результаты по количеству совпадений ключевых слов:
     ```python
     literature.sort(key=lambda x: sum(kw in x['keywords'].lower() for kw in keywords), reverse=True)
     ```
2. **Поддержка синонимов**:
   - Добавить синонимы в `keywords` (например, "калькулус" для "Математический анализ").
3. **Альтернативные библиотеки NLP**:
   - Рассмотреть `natasha` для более точной обработки русского текста.
4. **Расширение рекомендаций**:
   - Добавить динамические рекомендации на основе истории запросов пользователя.
5. **Локализация**:
   - Поддержка других языков для интернациональных студентов.

## 8. Заключение

Система консультирования обучающихся успешно решает задачу предоставления рекомендаций и литературы для студентов. Использование `pymorphy3` для нормализации слов и расширенного поля `keywords` обеспечивает точный поиск литературы. Тёмная тема с фиолетовыми акцентами делает интерфейс современным и удобным. Проект готов к демонстрации и может быть расширен дополнительными функциями, такими как ранжирование результатов или интеграция с внешними API.

## 9. Приложения

### Структура файлов
- `app.py`: Flask-сервер.
- `database.py`: Управление подключением к PostgreSQL.
- `nlp_module.py`: Обработка текста и поиск литературы.
- `index.html`: Фронтенд-интерфейс.
- `script.js`: Клиентская логика.
- `requirements.txt`: Зависимости проекта.

### Скриншоты
